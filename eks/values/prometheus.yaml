
grafana:
  enabled: true
  ingress:
    hosts: 
      - grafana-thanos.aws.aurotfp.com
    paths:
    - /*
    annotations:
      external-dns/zone: private
      external-dns.alpha.kubernetes.io/hostname:  grafana-thanos.aws.aurotfp.com
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
      alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:770688751007:certificate/61c1254c-05f6-426c-9f4e-fc8ac296a802
  # auth.okta:
  #   name: Okta
  #   icon: okta
  #   enabled: true
  #   allow_sign_up: true
  #   client_id: some_id
  #   client_secret: some_secret
  #   scopes: openid profile email groups
  #   auth_url: https://<tenant-id>.okta.com/oauth2/v1/authorize
  #   token_url: https://<tenant-id>.okta.com/oauth2/v1/token
  #   api_url: https://<tenant-id>.okta.com/oauth2/v1/userinfo
  #   allowed_domains:
  #   allowed_groups:
  #   role_attribute_path:
  sidecar:
    datasources:
        url: http://thanos-query.monitoring.svc.cluster.local:9090
kubelet:
  enabled: true
  serviceMonitor:
    https: false
# kubeControllerManager:
#   enabled: false
# coreDns:
#   enabled: true
# kubeApiServer:
#   enabled: false
# kubeEtcd:
#   enabled: false
# kubeScheduler:
#   enabled: false
# kubeProxy:
#   enabled: true

prometheusOperator:
  kubeletService:
    enabled: true
  resources:
    requests:
      cpu: 500m
      memory: 100Mi
    limits:
      cpu: 700m
      memory: 200Mi

prometheus:
  enabled: true
  serviceAccount:
    create: false
    name: thanos-role
  prometheusSpec:
    externalLabels:
      cluster: monitoring
      region: us-east-1
    scrapeInterval: "1m"
    scrapeTimeout: "60s"
    evaluationInterval: "1m"
    retention: 7d
    additionalScrapeConfigsSecret:
      enabled: true
      name: prometheus-extra
      key: prometheus-extra.yaml
    resources:
      requests:
        cpu: 200m
        memory: 1000Mi
      limits:
        cpu: 2500m
        memory: 20000Mi
    storageSpec:
      volumeClaimTemplate:
        metadata:
          name: prometheus
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 30Gi
    thanos:
      baseImage: quay.io/thanos/thanos
      objectStorageConfig:
        name: thanos-objstore-config
        key: thanos.yaml
  thanosService:
    enabled: true
  thanosIngress:
    enabled: false
    paths:
    - /*
    annotations:
      external-dns/zone: private
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/backend-protocol-version: GRPC
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
      alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      
alertmanager:
  enabled: true
  serviceAccount:
    create: false
    name: thanos-role
  alertmanagerSpec:

    useExistingSecret: true
    secrets:
      - alertmanager-secret
  # alertmanagerSpec:
  #   storage:
  #     volumeClaimTemplate:
  #       metadata:
  #         name: alertmanager
  #       spec:
  #         storageClassName: gp2
  #         accessModes: ["ReadWriteOnce"]
  #         resources:
  #           requests:
  #             storage: 20Gi
  # tplConfig: true 
  # config:
  #   route:
  #     group_by: ['alertname']
  #     repeat_interval: 3h
  #     receiver: 'default'
  #     group_wait: 1m
  #     group_interval: 10m
  #     routes:
  #       - match:
  #           alertname: KafkaConsumersGroup
  #         receiver: 'null'
  #       - match:
  #           alertname: ConsumerLagAlert
  #         receiver: 'null'
  #       - match:
  #           alertname: Watchdog
  #         receiver: 'null'
  #     receivers: 
  #     - name: "null"
  #     - name: 'default'
  #       webhook_configs:
  #       - send_resolved: true
  #         url: http://alertmanager-sns-forwarder.monitoring:9087/alert/NOTIFICATION

kubeStateMetrics:
  enabled: true
nodeExporter:
  enabled: true