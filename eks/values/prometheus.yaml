
grafana:
  enabled: true
  service:
    enabled: true
  sidecar:
    dashboards:
      multicluster:        
        global:
          enabled: true
      provider:
        allowUiUpdates: false
    alerts:
      enabled: true
      labelValue: "1"
    datasources:
        url: http://thanos-query.monitoring.svc.cluster.local:9090
  grafana.ini:
    server:
      root_url: https://grafana-thanos.aws.aurotfp.com
    auth.okta:
        name: Okta
        icon: okta
        enabled: true
        allow_sign_up: true
        client_id: "0oajqfxc58MWSAfJ42p7"
        client_secret: "rCcFPYOjBwqGFNLLDOcQGavuMie4T1qKsYqkFaDN"
        scopes: openid profile email groups
        auth_url: https://exosfinancial.okta.com/oauth2/v1/authorize
        token_url: https://exosfinancial.okta.com/oauth2/v1/token
        api_url: https://exosfinancial.okta.com/oauth2/v1/userinfo
  alerting:
    contactpoints.yaml:
      apiVersion: 1
      contactPoints:
        - orgId: 1
          name: cp_1
          receivers:
            - uid: first_uid
              type: pagerduty
              settings:
                integrationKey: XXX
                severity: critical
                class: ping failure
                component: Grafana
                group: app-stack
  ingress:
    enabled: true
    hosts: 
      - grafana-thanos.aws.aurotfp.com
    annotations:
      kubernetes.io/ingress.class: alb
      external-dns/zone: private
      external-dns.alpha.kubernetes.io/hostname: grafana-thanos.aws.aurotfp.com
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/subnets: subnet-0bff897d94caea79c, subnet-0d805eacd24f662d1
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/success-codes: 200-302
      alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:770688751007:certificate/a04e263f-8c9d-4e1f-a3ca-8bf79fbcf5e6

kubelet:
  enabled: true

prometheusOperator:
  kubeletService:
    enabled: true
  resources:
    requests:
      cpu: 500m
      memory: 100Mi
    limits:
      cpu: 700m
      memory: 200Mi

prometheus:
  enabled: true
  serviceAccount:
    create: false
    name: thanos-role
  ingress:
    enabled: true
    hosts: 
      - prometheus-thanos.aws.aurotfp.com
    pathType: Prefix
    annotations:
      kubernetes.io/ingress.class: alb
      external-dns/zone: private
      external-dns.alpha.kubernetes.io/hostname: prometheus-thanos.aws.aurotfp.com
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/subnets: subnet-0bff897d94caea79c, subnet-0d805eacd24f662d1
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/success-codes: 200-302
      alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:770688751007:certificate/a04e263f-8c9d-4e1f-a3ca-8bf79fbcf5e6
  prometheusSpec:
    externalLabels:
      cluster: monitoring
      region: us-east-1
    scrapeInterval: "1m"
    scrapeTimeout: "60s"
    evaluationInterval: "1m"
    retention: 7d
    additionalScrapeConfigsSecret:
      enabled: true
      name: prometheus-extra
      key: prometheus-extra.yaml
    resources:
      requests:
        cpu: 200m
        memory: 1000Mi
      limits:
        cpu: 2500m
        memory: 20000Mi
    storageSpec:
      volumeClaimTemplate:
        metadata:
          name: prometheus
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 30Gi
    thanos:
      objectStorageConfig:
        name: thanos-objstore-config
        key: thanos.yaml
  thanosService:
    enabled: true
      
alertmanager:
  enabled: false
  serviceAccount:
    create: false
    name: thanos-role
  alertmanagerSpec:

    useExistingSecret: true
    secrets:
      - alertmanager-secret

kubeStateMetrics:
  enabled: true
nodeExporter:
  enabled: true